apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def debugKeyPath = new File(System.properties['user.home'], ".android/debug.keystore")

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.frostnerd.smokescreen"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 58
        versionName "1.2.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("Boolean", "FROM_CI", String.valueOf(getSystemVariableOrDefault("CI_COMMIT_SHORT_SHA", "") != ""))
        buildConfigField("String", "COMMIT_HASH", '"' + getGitCommitHash() + '"')
        buildConfigField("String", "SENTRY_DSN", '""')

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        vectorDrawables {
            useSupportLibrary = true
        }
    }
    signingConfigs {
        fromVariablesOrDebug {
            storeFile new File(getSystemVariableOrDefault("KEYSTORE_FILE", debugKeyPath.path))
            storePassword getSystemVariableOrDefault("KEYSTORE_PASSWOR" +
                    "D", "android")
            keyAlias = getSystemVariableOrDefault("KEYSTORE_KEY_NAME", "androiddebugkey")
            keyPassword getSystemVariableOrDefault("KEYSTORE_KEY_PASSWORD", "android")
        }
        release {
            storeFile new File(getSystemVariableOrDefault("KEYSTORE_FILE", ""))
            storePassword getSystemVariableOrDefault("KEYSTORE_PASSWORD", "")
            keyAlias = getSystemVariableOrDefault("KEYSTORE_KEY_NAME", "")
            keyPassword getSystemVariableOrDefault("KEYSTORE_KEY_PASSWORD", "")
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        debug.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField("Boolean", "LEAK_DETECTION", "false")
        }
        debug {
            initWith buildTypes.debug
            buildConfigField("Boolean", "LEAK_DETECTION", "false")
        }
        leakCanary {
            initWith buildTypes.debug
            buildConfigField("Boolean", "LEAK_DETECTION", "true")
        }
        fdroid {
            initWith release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        unsignedRelease {
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("Boolean", "LEAK_DETECTION", "false")
        }
    }
    flavorDimensions "version"
    productFlavors {
        adblocker {
            dimension "version"
            versionNameSuffix "-adblock"
        }
        normal {
            dimension "version"
        }
    }
    packagingOptions {
        exclude 'META-INF/library_release.kotlin_module'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions{
        disable 'MissingTranslation'
        disable 'InvalidPeriodicWorkRequestInterval'
    }
}

static def compileBinariesLocally() {
    return System.getenv("COMPILE_BINARIES") != null
}

dependencies {
    def room_version = "2.2.5"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.6'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.6'


    if(!compileBinariesLocally()) {
        println "Using compiled binaries"
        implementation 'com.frostnerd.utilskt:preferences:1.5.22' // https://git.frostnerd.com/AndroidUtils/preferenceskt
        implementation 'com.frostnerd.utilskt:navigationdraweractivity:1.3.36' // https://git.frostnerd.com/AndroidUtils/navigationdraweractivity
        implementation 'com.frostnerd.utilskt:encrypteddnstunnelproxy:1.5.193' // https://git.frostnerd.com/AndroidUtils/encrypteddnstunnelproxy
        implementation 'com.frostnerd.utilskt:general:1.0.24' // https://git.frostnerd.com/AndroidUtils/generalkt
        implementation 'com.frostnerd.utilskt:adapters:1.1.15' // https://git.frostnerd.com/AndroidUtils/Adapters
    }

    implementation 'androidx.work:work-runtime:2.3.4'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.preference:preference:1.1.1"
    implementation "com.google.android.material:material:1.2.0-alpha06"
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0-alpha01'

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-coroutines:2.1.0-alpha04"
    testImplementation "androidx.room:room-testing:$room_version"

    implementation 'io.sentry:sentry-android:1.7.30'

    implementation 'com.github.jorgecastilloprz:fabprogresscircle:1.01@aar'
    implementation 'com.squareup.leakcanary:leaksentry:2.0-alpha-3'

    leakCanaryImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'

    testImplementation 'junit:junit:4.13'
    testImplementation "org.robolectric:robolectric:4.3.1"
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

git {
    def selfCompile = compileBinariesLocally()
    if(selfCompile) {
        implementation "https://git.frostnerd.com/AndroidUtils/preferenceskt.git", {
            projectPath "/library"
        }
        implementation "https://git.frostnerd.com/AndroidUtils/navigationdraweractivity.git", {
            projectPath "/library"
        }
        implementation "https://git.frostnerd.com/AndroidUtils/encrypteddnstunnelproxy.git", {
            projectPath "/library"
        }
        implementation "https://git.frostnerd.com/AndroidUtils/generalkt.git", {
            projectPath "/library"
        }
        implementation "https://git.frostnerd.com/AndroidUtils/Adapters.git", {
            projectPath "/library"
        }
        println "Self-compiling libraries"
    }
}

def getGitCommitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}